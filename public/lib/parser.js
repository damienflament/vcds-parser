// @generated by Peggy 4.0.2.
//
// https://peggyjs.org/



  function string(str) {
    str = str.trim()

    if (str.length === 0) {
      str = null
    }

    return str
  }

  function integer(str) {
    return parseInt(str)
  }

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "VCDS -- Windows Based VAG/VAS Emulator Running on Windows 10 x64";
  var peg$c1 = "VCDS Version:";
  var peg$c2 = "(";
  var peg$c3 = "x64";
  var peg$c4 = ")";
  var peg$c5 = "Data version:";
  var peg$c6 = "www.Ross-Tech.com";
  var peg$c7 = "Dealer/Shop Name:";
  var peg$c8 = "VIN:";
  var peg$c9 = "License Plate:";
  var peg$c10 = "Chassis Type:";
  var peg$c11 = "Scan:";
  var peg$c12 = "Mileage:";
  var peg$c13 = "End";
  var peg$c14 = "-";
  var peg$c15 = "(Elapsed Time:";
  var peg$c16 = ":";
  var peg$c17 = "\r\n";
  var peg$c18 = ",";
  var peg$c19 = ":00009";
  var peg$c20 = "Monday";
  var peg$c21 = "Tuesday";
  var peg$c22 = "Wednesday";
  var peg$c23 = "Thursday";
  var peg$c24 = "Friday";
  var peg$c25 = "Saturday";
  var peg$c26 = "Sunday";
  var peg$c27 = "3";
  var peg$c28 = "January";
  var peg$c29 = "February";
  var peg$c30 = "March";
  var peg$c31 = "April";
  var peg$c32 = "May";
  var peg$c33 = "June";
  var peg$c34 = "July";
  var peg$c35 = "August";
  var peg$c36 = "September";
  var peg$c37 = "October";
  var peg$c38 = "November";
  var peg$c39 = "December";
  var peg$c40 = "2";
  var peg$c41 = ".";
  var peg$c42 = "DS";
  var peg$c43 = "km";
  var peg$c44 = "miles";
  var peg$c45 = "--";
  var peg$c46 = "Status:";
  var peg$c47 = "Address";
  var peg$c48 = "Part No:";
  var peg$c49 = "Part No";
  var peg$c50 = "SW:";
  var peg$c51 = "HW:";
  var peg$c52 = "Hardware No";
  var peg$c53 = "Component:";
  var peg$c54 = "Revision:";
  var peg$c55 = "Serial number:";
  var peg$c56 = "Coding:";
  var peg$c57 = "Shop #:";
  var peg$c58 = "WSC";
  var peg$c59 = "VCID:";
  var peg$c60 = "VINID:";
  var peg$c61 = "Readiness:";
  var peg$c62 = "Subsystem";
  var peg$c63 = "Labels:";
  var peg$c64 = "Shop #: WSC";
  var peg$c65 = "No fault code found.";
  var peg$c66 = "Fault";
  var peg$c67 = "s";
  var peg$c68 = "Found:";
  var peg$c69 = "P";
  var peg$c70 = "Freeze Frame:";
  var peg$c71 = "Fault Status:";
  var peg$c72 = "Fault Priority:";
  var peg$c73 = "Fault Frequency:";
  var peg$c74 = "Reset counter:";
  var peg$c75 = "Time Indication:";
  var peg$c76 = " ";

  var peg$r0 = /^[0-2]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[0-1]/;
  var peg$r3 = /^[12]/;
  var peg$r4 = /^[01]/;
  var peg$r5 = /^[0-4]/;
  var peg$r6 = /^[0-5]/;
  var peg$r7 = /^[A-Z0-9\-]/;
  var peg$r8 = /^[^\-]/;
  var peg$r9 = /^[^01]/;
  var peg$r10 = /^[^:]/;
  var peg$r11 = /^[A-Z0-9 ]/i;
  var peg$r12 = /^[1-9]/;
  var peg$r13 = /^[0-9A-F]/;
  var peg$r14 = /^[A-Z]/;
  var peg$r15 = /^[0-9A-Z]/;
  var peg$r16 = /^[^ \r\n]/;
  var peg$r17 = /^[^\r]/;

  var peg$e0 = peg$literalExpectation("VCDS -- Windows Based VAG/VAS Emulator Running on Windows 10 x64", false);
  var peg$e1 = peg$literalExpectation("VCDS Version:", false);
  var peg$e2 = peg$literalExpectation("(", false);
  var peg$e3 = peg$literalExpectation("x64", false);
  var peg$e4 = peg$literalExpectation(")", false);
  var peg$e5 = peg$literalExpectation("Data version:", false);
  var peg$e6 = peg$literalExpectation("www.Ross-Tech.com", false);
  var peg$e7 = peg$literalExpectation("Dealer/Shop Name:", false);
  var peg$e8 = peg$literalExpectation("VIN:", false);
  var peg$e9 = peg$literalExpectation("License Plate:", false);
  var peg$e10 = peg$literalExpectation("Chassis Type:", false);
  var peg$e11 = peg$literalExpectation("Scan:", false);
  var peg$e12 = peg$literalExpectation("Mileage:", false);
  var peg$e13 = peg$literalExpectation("End", false);
  var peg$e14 = peg$literalExpectation("-", false);
  var peg$e15 = peg$literalExpectation("(Elapsed Time:", false);
  var peg$e16 = peg$literalExpectation(":", false);
  var peg$e17 = peg$literalExpectation("\r\n", false);
  var peg$e18 = peg$otherExpectation("une date");
  var peg$e19 = peg$literalExpectation(",", false);
  var peg$e20 = peg$literalExpectation(":00009", false);
  var peg$e21 = peg$literalExpectation("Monday", false);
  var peg$e22 = peg$literalExpectation("Tuesday", false);
  var peg$e23 = peg$literalExpectation("Wednesday", false);
  var peg$e24 = peg$literalExpectation("Thursday", false);
  var peg$e25 = peg$literalExpectation("Friday", false);
  var peg$e26 = peg$literalExpectation("Saturday", false);
  var peg$e27 = peg$literalExpectation("Sunday", false);
  var peg$e28 = peg$classExpectation([["0", "2"]], false, false);
  var peg$e29 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e30 = peg$literalExpectation("3", false);
  var peg$e31 = peg$classExpectation([["0", "1"]], false, false);
  var peg$e32 = peg$literalExpectation("January", false);
  var peg$e33 = peg$literalExpectation("February", false);
  var peg$e34 = peg$literalExpectation("March", false);
  var peg$e35 = peg$literalExpectation("April", false);
  var peg$e36 = peg$literalExpectation("May", false);
  var peg$e37 = peg$literalExpectation("June", false);
  var peg$e38 = peg$literalExpectation("July", false);
  var peg$e39 = peg$literalExpectation("August", false);
  var peg$e40 = peg$literalExpectation("September", false);
  var peg$e41 = peg$literalExpectation("October", false);
  var peg$e42 = peg$literalExpectation("November", false);
  var peg$e43 = peg$literalExpectation("December", false);
  var peg$e44 = peg$classExpectation(["1", "2"], false, false);
  var peg$e45 = peg$classExpectation(["0", "1"], false, false);
  var peg$e46 = peg$literalExpectation("2", false);
  var peg$e47 = peg$classExpectation([["0", "4"]], false, false);
  var peg$e48 = peg$classExpectation([["0", "5"]], false, false);
  var peg$e49 = peg$otherExpectation("a version specifier");
  var peg$e50 = peg$literalExpectation(".", false);
  var peg$e51 = peg$literalExpectation("DS", false);
  var peg$e52 = peg$otherExpectation("a VIN");
  var peg$e53 = peg$otherExpectation("a license plate number");
  var peg$e54 = peg$classExpectation([["A", "Z"], ["0", "9"], "-"], false, false);
  var peg$e55 = peg$otherExpectation("a chassis code");
  var peg$e56 = peg$literalExpectation("km", false);
  var peg$e57 = peg$literalExpectation("miles", false);
  var peg$e58 = peg$classExpectation(["-"], true, false);
  var peg$e59 = peg$literalExpectation("--", false);
  var peg$e60 = peg$literalExpectation("Status:", false);
  var peg$e61 = peg$classExpectation(["0", "1"], true, false);
  var peg$e62 = peg$otherExpectation("a module address");
  var peg$e63 = peg$literalExpectation("Address", false);
  var peg$e64 = peg$classExpectation([":"], true, false);
  var peg$e65 = peg$literalExpectation("Part No:", false);
  var peg$e66 = peg$literalExpectation("Part No", false);
  var peg$e67 = peg$literalExpectation("SW:", false);
  var peg$e68 = peg$literalExpectation("HW:", false);
  var peg$e69 = peg$literalExpectation("Hardware No", false);
  var peg$e70 = peg$literalExpectation("Component:", false);
  var peg$e71 = peg$literalExpectation("Revision:", false);
  var peg$e72 = peg$literalExpectation("Serial number:", false);
  var peg$e73 = peg$literalExpectation("Coding:", false);
  var peg$e74 = peg$literalExpectation("Shop #:", false);
  var peg$e75 = peg$literalExpectation("WSC", false);
  var peg$e76 = peg$literalExpectation("VCID:", false);
  var peg$e77 = peg$literalExpectation("VINID:", false);
  var peg$e78 = peg$literalExpectation("Readiness:", false);
  var peg$e79 = peg$otherExpectation("a part number");
  var peg$e80 = peg$otherExpectation("a coding value");
  var peg$e81 = peg$otherExpectation("a shop WSC");
  var peg$e82 = peg$otherExpectation("a short shop WSC");
  var peg$e83 = peg$otherExpectation("a VCID");
  var peg$e84 = peg$otherExpectation("a VINID");
  var peg$e85 = peg$otherExpectation("readiness flags");
  var peg$e86 = peg$literalExpectation("Subsystem", false);
  var peg$e87 = peg$literalExpectation("Labels:", false);
  var peg$e88 = peg$literalExpectation("Shop #: WSC", false);
  var peg$e89 = peg$classExpectation([["A", "Z"], ["0", "9"], " "], false, true);
  var peg$e90 = peg$otherExpectation("a faults section");
  var peg$e91 = peg$literalExpectation("No fault code found.", false);
  var peg$e92 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e93 = peg$literalExpectation("Fault", false);
  var peg$e94 = peg$literalExpectation("s", false);
  var peg$e95 = peg$literalExpectation("Found:", false);
  var peg$e96 = peg$otherExpectation("error code");
  var peg$e97 = peg$literalExpectation("P", false);
  var peg$e98 = peg$otherExpectation("fault code");
  var peg$e99 = peg$otherExpectation("fault description code");
  var peg$e100 = peg$literalExpectation("Freeze Frame:", false);
  var peg$e101 = peg$literalExpectation("Fault Status:", false);
  var peg$e102 = peg$literalExpectation("Fault Priority:", false);
  var peg$e103 = peg$literalExpectation("Fault Frequency:", false);
  var peg$e104 = peg$literalExpectation("Reset counter:", false);
  var peg$e105 = peg$literalExpectation("Time Indication:", false);
  var peg$e106 = peg$otherExpectation("a dash line");
  var peg$e107 = peg$otherExpectation("a numeric character");
  var peg$e108 = peg$otherExpectation("an hexadecimal character");
  var peg$e109 = peg$classExpectation([["0", "9"], ["A", "F"]], false, false);
  var peg$e110 = peg$otherExpectation("a binary character");
  var peg$e111 = peg$otherExpectation("an uppercase alphabetic character");
  var peg$e112 = peg$classExpectation([["A", "Z"]], false, false);
  var peg$e113 = peg$otherExpectation("an alphanumeric uppercase character");
  var peg$e114 = peg$classExpectation([["0", "9"], ["A", "Z"]], false, false);
  var peg$e115 = peg$otherExpectation("a blank space");
  var peg$e116 = peg$literalExpectation(" ", false);
  var peg$e117 = peg$otherExpectation("a word");
  var peg$e118 = peg$classExpectation([" ", "\r", "\n"], true, false);
  var peg$e119 = peg$otherExpectation("an empty line");
  var peg$e120 = peg$otherExpectation("the end of line");
  var peg$e121 = peg$otherExpectation("the rest of line");
  var peg$e122 = peg$classExpectation(["\r"], true, false);

  var peg$f0 = function(date, version, platform, dataDate, dataVersion, shop, vin, licensePlate, chassis, mileage, modulesStatus, moduleInfos, duration) {
    const hashedModuleInfos = {}

    for (const m of moduleInfos) {
      hashedModuleInfos[m['address']] = m
    }

    const modules = {}

    for (const m of modulesStatus) {
      const address = m['address']
      modules[address] = Object.assign(m, hashedModuleInfos[address])
    }

    return {
      report: {
        date,
        shop,
      },
      software: {
        version,
        platform,
        data: {
          date: dataDate,
          version: dataVersion
        }
      },
      vehicule: {
        vin,
        licensePlate: string(licensePlate),
        chassis,
        mileage
      },
      modules
    }
  };
  var peg$f1 = function() { return new Date(text()) };
  var peg$f2 = function(km, miles) { return { km: integer(km), miles: integer(miles) } };
  var peg$f3 = function(address, name, statusDescription, status) {
    return {
      address,
      name: string(name),
      status: {
        flags: status,
        description: string(statusDescription)
      }
    }
  };
  var peg$f4 = function(address, labels, software, hardware) { return { software, hardware } };
  var peg$f5 = function(address, labels, partNumber, component, revision, serial, coding, codingWsc, vcid, vinid, subsystems, faults, readiness) {
    return {
      address,
      labelsFile: labels,
      partNumber,
      component: string(component),
      revision,
      serial,
      coding : {
        value: coding,
        wsc: codingWsc
      },
      vcid,
      vinid,
      subsystems,
      faults,
      readiness
    }
  };
  var peg$f6 = function(index, partNumber, labels, component, coding, wsc) {
    return {
      index: integer(index),
      partNumber,
      component: string(component),
      labelsFile: labels,
      coding: {
        value: coding,
        wsc: wsc
      }
    }
  };
  var peg$f7 = function() { return [] };
  var peg$f8 = function(faults) { return faults };
  var peg$f9 = function(code, subject, errorCode, descriptionCode, description, freezeFrame) {
    return {
      code,
      subject: string(subject),
      errorCode,
      descriptionCode,
      description: string(description),
      freezeFrame
    }
  };
  var peg$f10 = function(status, priority, frequency, resetCounter, mileage, mileageUnit, timeIndication) {
    return {
      status,
      priority: integer(priority),
      frequency: integer(frequency),
      resetCounter: integer(resetCounter),
      mileage: integer(mileage),
      mileageUnit,
      timeIndication
    }
  };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parsereport();

    return s0;
  }

  function peg$parsereport() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64;

    s0 = peg$currPos;
    s1 = peg$parsedatetime();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeol();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 64) === peg$c0) {
          s3 = peg$c0;
          peg$currPos += 64;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeol();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c1) {
              s5 = peg$c1;
              peg$currPos += 13;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseversionSpecifier();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s9 = peg$c2;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e2); }
                    }
                    if (s9 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c3) {
                        s10 = peg$c3;
                        peg$currPos += 3;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e3); }
                      }
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s11 = peg$c4;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e4); }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseeol();
                          if (s12 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 13) === peg$c5) {
                              s13 = peg$c5;
                              peg$currPos += 13;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e5); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parse_();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parsedataVersionDate();
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parse_();
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parsedataVersionSpecifier();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseeol();
                                      if (s18 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 17) === peg$c6) {
                                          s19 = peg$c6;
                                          peg$currPos += 17;
                                        } else {
                                          s19 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e6); }
                                        }
                                        if (s19 !== peg$FAILED) {
                                          s20 = peg$parseeol();
                                          if (s20 !== peg$FAILED) {
                                            s21 = peg$parsel();
                                            if (s21 !== peg$FAILED) {
                                              if (input.substr(peg$currPos, 17) === peg$c7) {
                                                s22 = peg$c7;
                                                peg$currPos += 17;
                                              } else {
                                                s22 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e7); }
                                              }
                                              if (s22 !== peg$FAILED) {
                                                s23 = peg$parse_();
                                                if (s23 !== peg$FAILED) {
                                                  s24 = peg$currPos;
                                                  s25 = peg$parserol();
                                                  s24 = input.substring(s24, peg$currPos);
                                                  s25 = peg$parseeol();
                                                  if (s25 !== peg$FAILED) {
                                                    s26 = peg$parsel();
                                                    if (s26 !== peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c8) {
                                                        s27 = peg$c8;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s27 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e8); }
                                                      }
                                                      if (s27 !== peg$FAILED) {
                                                        s28 = peg$parse_();
                                                        if (s28 !== peg$FAILED) {
                                                          s29 = peg$parsevin();
                                                          if (s29 !== peg$FAILED) {
                                                            s30 = [];
                                                            s31 = peg$parse_();
                                                            if (s31 !== peg$FAILED) {
                                                              while (s31 !== peg$FAILED) {
                                                                s30.push(s31);
                                                                s31 = peg$parse_();
                                                              }
                                                            } else {
                                                              s30 = peg$FAILED;
                                                            }
                                                            if (s30 !== peg$FAILED) {
                                                              if (input.substr(peg$currPos, 14) === peg$c9) {
                                                                s31 = peg$c9;
                                                                peg$currPos += 14;
                                                              } else {
                                                                s31 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e9); }
                                                              }
                                                              if (s31 !== peg$FAILED) {
                                                                s32 = peg$parse_();
                                                                if (s32 !== peg$FAILED) {
                                                                  s33 = peg$parselicensePlate();
                                                                  s34 = peg$parseeol();
                                                                  if (s34 !== peg$FAILED) {
                                                                    s35 = [];
                                                                    s36 = peg$parsel();
                                                                    if (s36 !== peg$FAILED) {
                                                                      while (s36 !== peg$FAILED) {
                                                                        s35.push(s36);
                                                                        s36 = peg$parsel();
                                                                      }
                                                                    } else {
                                                                      s35 = peg$FAILED;
                                                                    }
                                                                    if (s35 !== peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 13) === peg$c10) {
                                                                        s36 = peg$c10;
                                                                        peg$currPos += 13;
                                                                      } else {
                                                                        s36 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$e10); }
                                                                      }
                                                                      if (s36 !== peg$FAILED) {
                                                                        s37 = peg$parse_();
                                                                        if (s37 !== peg$FAILED) {
                                                                          s38 = peg$parsechassis();
                                                                          if (s38 !== peg$FAILED) {
                                                                            s39 = peg$parseeol();
                                                                            if (s39 !== peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 5) === peg$c11) {
                                                                                s40 = peg$c11;
                                                                                peg$currPos += 5;
                                                                              } else {
                                                                                s40 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$e11); }
                                                                              }
                                                                              if (s40 !== peg$FAILED) {
                                                                                s41 = peg$parserol();
                                                                                s42 = peg$parseeol();
                                                                                if (s42 !== peg$FAILED) {
                                                                                  s43 = peg$parsel();
                                                                                  if (s43 !== peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 4) === peg$c8) {
                                                                                      s44 = peg$c8;
                                                                                      peg$currPos += 4;
                                                                                    } else {
                                                                                      s44 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e8); }
                                                                                    }
                                                                                    if (s44 !== peg$FAILED) {
                                                                                      s45 = peg$parse_();
                                                                                      if (s45 !== peg$FAILED) {
                                                                                        s46 = peg$parsevin();
                                                                                        if (s46 !== peg$FAILED) {
                                                                                          s47 = [];
                                                                                          s48 = peg$parse_();
                                                                                          if (s48 !== peg$FAILED) {
                                                                                            while (s48 !== peg$FAILED) {
                                                                                              s47.push(s48);
                                                                                              s48 = peg$parse_();
                                                                                            }
                                                                                          } else {
                                                                                            s47 = peg$FAILED;
                                                                                          }
                                                                                          if (s47 !== peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 8) === peg$c12) {
                                                                                              s48 = peg$c12;
                                                                                              peg$currPos += 8;
                                                                                            } else {
                                                                                              s48 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e12); }
                                                                                            }
                                                                                            if (s48 !== peg$FAILED) {
                                                                                              s49 = peg$parse_();
                                                                                              if (s49 !== peg$FAILED) {
                                                                                                s50 = peg$parsemileage();
                                                                                                if (s50 !== peg$FAILED) {
                                                                                                  s51 = peg$parseeol();
                                                                                                  if (s51 !== peg$FAILED) {
                                                                                                    s52 = peg$parsel();
                                                                                                    if (s52 !== peg$FAILED) {
                                                                                                      s53 = peg$currPos;
                                                                                                      s54 = [];
                                                                                                      s55 = peg$parsemodule();
                                                                                                      while (s55 !== peg$FAILED) {
                                                                                                        s54.push(s55);
                                                                                                        s55 = peg$currPos;
                                                                                                        s56 = peg$parseeol();
                                                                                                        if (s56 !== peg$FAILED) {
                                                                                                          s56 = peg$parsemodule();
                                                                                                          if (s56 === peg$FAILED) {
                                                                                                            peg$currPos = s55;
                                                                                                            s55 = peg$FAILED;
                                                                                                          } else {
                                                                                                            s55 = s56;
                                                                                                          }
                                                                                                        } else {
                                                                                                          s55 = s56;
                                                                                                        }
                                                                                                      }
                                                                                                      if (s54.length < 1) {
                                                                                                        peg$currPos = s53;
                                                                                                        s53 = peg$FAILED;
                                                                                                      } else {
                                                                                                        s53 = s54;
                                                                                                      }
                                                                                                      if (s53 !== peg$FAILED) {
                                                                                                        s54 = [];
                                                                                                        s55 = peg$parsel();
                                                                                                        if (s55 !== peg$FAILED) {
                                                                                                          while (s55 !== peg$FAILED) {
                                                                                                            s54.push(s55);
                                                                                                            s55 = peg$parsel();
                                                                                                          }
                                                                                                        } else {
                                                                                                          s54 = peg$FAILED;
                                                                                                        }
                                                                                                        if (s54 !== peg$FAILED) {
                                                                                                          s55 = [];
                                                                                                          s56 = peg$parsemoduleInfo();
                                                                                                          if (s56 !== peg$FAILED) {
                                                                                                            while (s56 !== peg$FAILED) {
                                                                                                              s55.push(s56);
                                                                                                              s56 = peg$parsemoduleInfo();
                                                                                                            }
                                                                                                          } else {
                                                                                                            s55 = peg$FAILED;
                                                                                                          }
                                                                                                          if (s55 !== peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 3) === peg$c13) {
                                                                                                              s56 = peg$c13;
                                                                                                              peg$currPos += 3;
                                                                                                            } else {
                                                                                                              s56 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e13); }
                                                                                                            }
                                                                                                            if (s56 !== peg$FAILED) {
                                                                                                              s57 = [];
                                                                                                              if (input.charCodeAt(peg$currPos) === 45) {
                                                                                                                s58 = peg$c14;
                                                                                                                peg$currPos++;
                                                                                                              } else {
                                                                                                                s58 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                                                                                              }
                                                                                                              if (s58 !== peg$FAILED) {
                                                                                                                while (s58 !== peg$FAILED) {
                                                                                                                  s57.push(s58);
                                                                                                                  if (input.charCodeAt(peg$currPos) === 45) {
                                                                                                                    s58 = peg$c14;
                                                                                                                    peg$currPos++;
                                                                                                                  } else {
                                                                                                                    s58 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                                                                                                  }
                                                                                                                }
                                                                                                              } else {
                                                                                                                s57 = peg$FAILED;
                                                                                                              }
                                                                                                              if (s57 !== peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 14) === peg$c15) {
                                                                                                                  s58 = peg$c15;
                                                                                                                  peg$currPos += 14;
                                                                                                                } else {
                                                                                                                  s58 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                                                                                                }
                                                                                                                if (s58 !== peg$FAILED) {
                                                                                                                  s59 = peg$parse_();
                                                                                                                  if (s59 !== peg$FAILED) {
                                                                                                                    s60 = peg$currPos;
                                                                                                                    s61 = peg$currPos;
                                                                                                                    s62 = peg$parseminutes();
                                                                                                                    if (s62 !== peg$FAILED) {
                                                                                                                      if (input.charCodeAt(peg$currPos) === 58) {
                                                                                                                        s63 = peg$c16;
                                                                                                                        peg$currPos++;
                                                                                                                      } else {
                                                                                                                        s63 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e16); }
                                                                                                                      }
                                                                                                                      if (s63 !== peg$FAILED) {
                                                                                                                        s64 = peg$parseseconds();
                                                                                                                        if (s64 !== peg$FAILED) {
                                                                                                                          s62 = [s62, s63, s64];
                                                                                                                          s61 = s62;
                                                                                                                        } else {
                                                                                                                          peg$currPos = s61;
                                                                                                                          s61 = peg$FAILED;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s61;
                                                                                                                        s61 = peg$FAILED;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s61;
                                                                                                                      s61 = peg$FAILED;
                                                                                                                    }
                                                                                                                    if (s61 !== peg$FAILED) {
                                                                                                                      s60 = input.substring(s60, peg$currPos);
                                                                                                                    } else {
                                                                                                                      s60 = s61;
                                                                                                                    }
                                                                                                                    if (s60 !== peg$FAILED) {
                                                                                                                      if (input.charCodeAt(peg$currPos) === 41) {
                                                                                                                        s61 = peg$c4;
                                                                                                                        peg$currPos++;
                                                                                                                      } else {
                                                                                                                        s61 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e4); }
                                                                                                                      }
                                                                                                                      if (s61 !== peg$FAILED) {
                                                                                                                        s62 = [];
                                                                                                                        if (input.charCodeAt(peg$currPos) === 45) {
                                                                                                                          s63 = peg$c14;
                                                                                                                          peg$currPos++;
                                                                                                                        } else {
                                                                                                                          s63 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                                                                                                        }
                                                                                                                        if (s63 !== peg$FAILED) {
                                                                                                                          while (s63 !== peg$FAILED) {
                                                                                                                            s62.push(s63);
                                                                                                                            if (input.charCodeAt(peg$currPos) === 45) {
                                                                                                                              s63 = peg$c14;
                                                                                                                              peg$currPos++;
                                                                                                                            } else {
                                                                                                                              s63 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e14); }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          s62 = peg$FAILED;
                                                                                                                        }
                                                                                                                        if (s62 !== peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 2) === peg$c17) {
                                                                                                                            s63 = peg$c17;
                                                                                                                            peg$currPos += 2;
                                                                                                                          } else {
                                                                                                                            s63 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e17); }
                                                                                                                          }
                                                                                                                          if (s63 !== peg$FAILED) {
                                                                                                                            peg$savedPos = s0;
                                                                                                                            s0 = peg$f0(s1, s7, s10, s15, s17, s24, s29, s33, s38, s50, s53, s55, s60);
                                                                                                                          } else {
                                                                                                                            peg$currPos = s0;
                                                                                                                            s0 = peg$FAILED;
                                                                                                                          }
                                                                                                                        } else {
                                                                                                                          peg$currPos = s0;
                                                                                                                          s0 = peg$FAILED;
                                                                                                                        }
                                                                                                                      } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$FAILED;
                                                                                                                      }
                                                                                                                    } else {
                                                                                                                      peg$currPos = s0;
                                                                                                                      s0 = peg$FAILED;
                                                                                                                    }
                                                                                                                  } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$FAILED;
                                                                                                                  }
                                                                                                                } else {
                                                                                                                  peg$currPos = s0;
                                                                                                                  s0 = peg$FAILED;
                                                                                                                }
                                                                                                              } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                              }
                                                                                                            } else {
                                                                                                              peg$currPos = s0;
                                                                                                              s0 = peg$FAILED;
                                                                                                            }
                                                                                                          } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                          }
                                                                                                        } else {
                                                                                                          peg$currPos = s0;
                                                                                                          s0 = peg$FAILED;
                                                                                                        }
                                                                                                      } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                      }
                                                                                                    } else {
                                                                                                      peg$currPos = s0;
                                                                                                      s0 = peg$FAILED;
                                                                                                    }
                                                                                                  } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                  }
                                                                                                } else {
                                                                                                  peg$currPos = s0;
                                                                                                  s0 = peg$FAILED;
                                                                                                }
                                                                                              } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                              }
                                                                                            } else {
                                                                                              peg$currPos = s0;
                                                                                              s0 = peg$FAILED;
                                                                                            }
                                                                                          } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                          }
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$FAILED;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$FAILED;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatetime() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedayName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c18;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseday();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c18;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemonthName();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c18;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e19); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseyear();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s8 = peg$c18;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e19); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsehours();
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s10 = peg$c16;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e16); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseminutes();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s12 = peg$c16;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e16); }
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parseseconds();
                            if (s13 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c19) {
                                s14 = peg$c19;
                                peg$currPos += 6;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e20); }
                              }
                              if (s14 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f1();
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parsedayName() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c20) {
      s0 = peg$c20;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c21) {
        s0 = peg$c21;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c22) {
          s0 = peg$c22;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c23) {
            s0 = peg$c23;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c24) {
              s0 = peg$c24;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c25) {
                s0 = peg$c25;
                peg$currPos += 8;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e26); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c26) {
                  s0 = peg$c26;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e27); }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseday() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 51) {
        s2 = peg$c27;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsemonthName() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c28) {
      s0 = peg$c28;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c29) {
        s0 = peg$c29;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c30) {
          s0 = peg$c30;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c31) {
            s0 = peg$c31;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c32) {
              s0 = peg$c32;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e36); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c33) {
                s0 = peg$c33;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e37); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c34) {
                  s0 = peg$c34;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e38); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c35) {
                    s0 = peg$c35;
                    peg$currPos += 6;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e39); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c36) {
                      s0 = peg$c36;
                      peg$currPos += 9;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e40); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c37) {
                        s0 = peg$c37;
                        peg$currPos += 7;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e41); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c38) {
                          s0 = peg$c38;
                          peg$currPos += 8;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e42); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8) === peg$c39) {
                            s0 = peg$c39;
                            peg$currPos += 8;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e43); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseyear() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r3.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r1.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (s3.length >= 3) {
          s4 = peg$FAILED;
        } else {
          s4 = input.charAt(peg$currPos);
          if (peg$r1.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
        }
      }
      if (s3.length < 3) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehours() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r4.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 50) {
        s2 = peg$c40;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r5.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseminutes() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r6.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r1.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseseconds() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r6.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r1.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseversionSpecifier() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsenum();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenum();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c41;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parsenum();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsenum();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c41;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsenum();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsenum();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s7 = peg$c41;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e50); }
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parsenum();
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parsenum();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7, s8];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parsedataVersionDate() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsenum();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 8) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parsenum();
      }
    }
    if (s2.length < 8) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsedataVersionSpecifier() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c42) {
      s2 = peg$c42;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parsenum();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (s4.length >= 3) {
          s5 = peg$FAILED;
        } else {
          s5 = peg$parsenum();
        }
      }
      if (s4.length < 3) {
        peg$currPos = s3;
        s3 = peg$FAILED;
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c41;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenum();
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsevin() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseuppnum();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 17) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parseuppnum();
      }
    }
    if (s2.length < 17) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parselicensePlate() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r7.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r7.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
    }
    s0 = input.substring(s0, peg$currPos);
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e53); }

    return s0;
  }

  function peg$parsechassis() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parseuppnum();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      if (s3.length >= 2) {
        s4 = peg$FAILED;
      } else {
        s4 = peg$parseuppnum();
      }
    }
    if (s3.length < 2) {
      peg$currPos = s2;
      s2 = peg$FAILED;
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseuppnum();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseuppnum();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c4;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s5 !== peg$FAILED) {
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parsemileage() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsenum();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenum();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c43) {
        s2 = peg$c43;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c14;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parsenum();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsenum();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c44) {
              s5 = peg$c44;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f2(s1, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemodule() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsemoduleAddress();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c14;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r8.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r8.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e58); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c45) {
            s4 = peg$c45;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e59); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c46) {
                s6 = peg$c46;
                peg$currPos += 7;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e60); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = [];
                  s10 = input.charAt(peg$currPos);
                  if (peg$r9.test(s10)) {
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e61); }
                  }
                  if (s10 !== peg$FAILED) {
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = input.charAt(peg$currPos);
                      if (peg$r9.test(s10)) {
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e61); }
                      }
                    }
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = input.substring(s8, peg$currPos);
                  } else {
                    s8 = s9;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$currPos;
                    s11 = [];
                    s12 = peg$parsebin();
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      if (s11.length >= 4) {
                        s12 = peg$FAILED;
                      } else {
                        s12 = peg$parsebin();
                      }
                    }
                    if (s11.length < 4) {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    } else {
                      s10 = s11;
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = input.substring(s9, peg$currPos);
                    } else {
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f3(s1, s3, s8, s9);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemoduleAddress() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsehexa();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 2) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parsehexa();
      }
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parsemoduleInfo() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43;

    s0 = peg$currPos;
    s1 = peg$parsedashLine();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c47) {
        s2 = peg$c47;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsemoduleAddress();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = input.charAt(peg$currPos);
              if (peg$r10.test(s7)) {
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e64); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = input.charAt(peg$currPos);
                  if (peg$r10.test(s7)) {
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e64); }
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s7 = peg$c16;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s8 = peg$c41;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e50); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  s9 = peg$parse_();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$currPos;
                    s11 = peg$parserol();
                    s10 = input.substring(s10, peg$currPos);
                    s11 = peg$parseeol();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$currPos;
                      s13 = [];
                      s14 = peg$parse_();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        if (s13.length >= 3) {
                          s14 = peg$FAILED;
                        } else {
                          s14 = peg$parse_();
                        }
                      }
                      if (s13.length < 3) {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      } else {
                        s12 = s13;
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$currPos;
                        if (input.substr(peg$currPos, 8) === peg$c48) {
                          s14 = peg$c48;
                          peg$currPos += 8;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e65); }
                        }
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse_();
                          if (s15 !== peg$FAILED) {
                            s16 = peg$parsepartNumber();
                            if (s16 !== peg$FAILED) {
                              s13 = s16;
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s13;
                          s13 = peg$FAILED;
                        }
                        if (s13 === peg$FAILED) {
                          s13 = peg$currPos;
                          if (input.substr(peg$currPos, 7) === peg$c49) {
                            s14 = peg$c49;
                            peg$currPos += 7;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e66); }
                          }
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parse_();
                            if (s15 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c50) {
                                s16 = peg$c50;
                                peg$currPos += 3;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e67); }
                              }
                              if (s16 !== peg$FAILED) {
                                s17 = peg$parse_();
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$parsepartNumber();
                                  if (s18 !== peg$FAILED) {
                                    s19 = [];
                                    s20 = peg$parse_();
                                    if (s20 !== peg$FAILED) {
                                      while (s20 !== peg$FAILED) {
                                        s19.push(s20);
                                        s20 = peg$parse_();
                                      }
                                    } else {
                                      s19 = peg$FAILED;
                                    }
                                    if (s19 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c51) {
                                        s20 = peg$c51;
                                        peg$currPos += 3;
                                      } else {
                                        s20 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e68); }
                                      }
                                      if (s20 !== peg$FAILED) {
                                        s21 = peg$parse_();
                                        if (s21 !== peg$FAILED) {
                                          s22 = peg$parsepartNumber();
                                          if (s22 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 11) === peg$c52) {
                                              s22 = peg$c52;
                                              peg$currPos += 11;
                                            } else {
                                              s22 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e69); }
                                            }
                                          }
                                          if (s22 !== peg$FAILED) {
                                            s23 = peg$parserol();
                                            peg$savedPos = s13;
                                            s13 = peg$f4(s4, s10, s18, s22);
                                          } else {
                                            peg$currPos = s13;
                                            s13 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s13;
                                          s13 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parseeol();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$currPos;
                            s16 = [];
                            s17 = peg$parse_();
                            while (s17 !== peg$FAILED) {
                              s16.push(s17);
                              if (s16.length >= 3) {
                                s17 = peg$FAILED;
                              } else {
                                s17 = peg$parse_();
                              }
                            }
                            if (s16.length < 3) {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            } else {
                              s15 = s16;
                            }
                            if (s15 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 10) === peg$c53) {
                                s16 = peg$c53;
                                peg$currPos += 10;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e70); }
                              }
                              if (s16 !== peg$FAILED) {
                                s17 = peg$parse_();
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$currPos;
                                  s19 = peg$parserol();
                                  s18 = input.substring(s18, peg$currPos);
                                  s19 = peg$parseeol();
                                  if (s19 !== peg$FAILED) {
                                    s20 = peg$currPos;
                                    s21 = peg$currPos;
                                    s22 = [];
                                    s23 = peg$parse_();
                                    while (s23 !== peg$FAILED) {
                                      s22.push(s23);
                                      if (s22.length >= 3) {
                                        s23 = peg$FAILED;
                                      } else {
                                        s23 = peg$parse_();
                                      }
                                    }
                                    if (s22.length < 3) {
                                      peg$currPos = s21;
                                      s21 = peg$FAILED;
                                    } else {
                                      s21 = s22;
                                    }
                                    if (s21 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 9) === peg$c54) {
                                        s22 = peg$c54;
                                        peg$currPos += 9;
                                      } else {
                                        s22 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e71); }
                                      }
                                      if (s22 !== peg$FAILED) {
                                        s23 = peg$parse_();
                                        if (s23 !== peg$FAILED) {
                                          s24 = peg$currPos;
                                          s25 = peg$parsew();
                                          if (s25 !== peg$FAILED) {
                                            s24 = input.substring(s24, peg$currPos);
                                          } else {
                                            s24 = s25;
                                          }
                                          if (s24 !== peg$FAILED) {
                                            s25 = [];
                                            s26 = peg$parse_();
                                            if (s26 !== peg$FAILED) {
                                              while (s26 !== peg$FAILED) {
                                                s25.push(s26);
                                                s26 = peg$parse_();
                                              }
                                            } else {
                                              s25 = peg$FAILED;
                                            }
                                            if (s25 !== peg$FAILED) {
                                              s20 = s24;
                                            } else {
                                              peg$currPos = s20;
                                              s20 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s20;
                                            s20 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s20;
                                          s20 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s20;
                                        s20 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s20;
                                      s20 = peg$FAILED;
                                    }
                                    if (s20 === peg$FAILED) {
                                      s20 = null;
                                    }
                                    s21 = peg$currPos;
                                    if (input.substr(peg$currPos, 14) === peg$c55) {
                                      s22 = peg$c55;
                                      peg$currPos += 14;
                                    } else {
                                      s22 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e72); }
                                    }
                                    if (s22 !== peg$FAILED) {
                                      s23 = peg$parse_();
                                      if (s23 !== peg$FAILED) {
                                        s24 = peg$currPos;
                                        s25 = peg$parsew();
                                        if (s25 !== peg$FAILED) {
                                          s24 = input.substring(s24, peg$currPos);
                                        } else {
                                          s24 = s25;
                                        }
                                        if (s24 !== peg$FAILED) {
                                          s25 = peg$parseeol();
                                          if (s25 !== peg$FAILED) {
                                            s21 = s24;
                                          } else {
                                            peg$currPos = s21;
                                            s21 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s21;
                                          s21 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s21;
                                        s21 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s21;
                                      s21 = peg$FAILED;
                                    }
                                    if (s21 === peg$FAILED) {
                                      s21 = null;
                                    }
                                    s22 = peg$currPos;
                                    s23 = peg$currPos;
                                    s24 = [];
                                    s25 = peg$parse_();
                                    while (s25 !== peg$FAILED) {
                                      s24.push(s25);
                                      if (s24.length >= 3) {
                                        s25 = peg$FAILED;
                                      } else {
                                        s25 = peg$parse_();
                                      }
                                    }
                                    if (s24.length < 3) {
                                      peg$currPos = s23;
                                      s23 = peg$FAILED;
                                    } else {
                                      s23 = s24;
                                    }
                                    if (s23 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 7) === peg$c56) {
                                        s24 = peg$c56;
                                        peg$currPos += 7;
                                      } else {
                                        s24 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e73); }
                                      }
                                      if (s24 !== peg$FAILED) {
                                        s25 = peg$parse_();
                                        if (s25 !== peg$FAILED) {
                                          s26 = peg$parsecodingValue();
                                          if (s26 !== peg$FAILED) {
                                            s27 = peg$parseeol();
                                            if (s27 !== peg$FAILED) {
                                              s22 = s26;
                                            } else {
                                              peg$currPos = s22;
                                              s22 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s22;
                                            s22 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s22;
                                          s22 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s22;
                                        s22 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s22;
                                      s22 = peg$FAILED;
                                    }
                                    if (s22 === peg$FAILED) {
                                      s22 = null;
                                    }
                                    s23 = peg$currPos;
                                    s24 = [];
                                    s25 = peg$parse_();
                                    while (s25 !== peg$FAILED) {
                                      s24.push(s25);
                                      if (s24.length >= 3) {
                                        s25 = peg$FAILED;
                                      } else {
                                        s25 = peg$parse_();
                                      }
                                    }
                                    if (s24.length < 3) {
                                      peg$currPos = s23;
                                      s23 = peg$FAILED;
                                    } else {
                                      s23 = s24;
                                    }
                                    if (s23 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 7) === peg$c57) {
                                        s24 = peg$c57;
                                        peg$currPos += 7;
                                      } else {
                                        s24 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e74); }
                                      }
                                      if (s24 !== peg$FAILED) {
                                        s25 = peg$parse_();
                                        if (s25 !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 3) === peg$c58) {
                                            s26 = peg$c58;
                                            peg$currPos += 3;
                                          } else {
                                            s26 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e75); }
                                          }
                                          if (s26 !== peg$FAILED) {
                                            s27 = peg$parse_();
                                            if (s27 !== peg$FAILED) {
                                              s28 = peg$parseshopWsc();
                                              if (s28 !== peg$FAILED) {
                                                s29 = peg$parseeol();
                                                if (s29 !== peg$FAILED) {
                                                  s30 = peg$currPos;
                                                  s31 = [];
                                                  s32 = peg$parse_();
                                                  while (s32 !== peg$FAILED) {
                                                    s31.push(s32);
                                                    if (s31.length >= 3) {
                                                      s32 = peg$FAILED;
                                                    } else {
                                                      s32 = peg$parse_();
                                                    }
                                                  }
                                                  if (s31.length < 3) {
                                                    peg$currPos = s30;
                                                    s30 = peg$FAILED;
                                                  } else {
                                                    s30 = s31;
                                                  }
                                                  if (s30 !== peg$FAILED) {
                                                    if (input.substr(peg$currPos, 5) === peg$c59) {
                                                      s31 = peg$c59;
                                                      peg$currPos += 5;
                                                    } else {
                                                      s31 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e76); }
                                                    }
                                                    if (s31 !== peg$FAILED) {
                                                      s32 = peg$parse_();
                                                      if (s32 !== peg$FAILED) {
                                                        s33 = peg$parsevcid();
                                                        if (s33 !== peg$FAILED) {
                                                          s34 = peg$parseeol();
                                                          if (s34 !== peg$FAILED) {
                                                            s35 = peg$currPos;
                                                            s36 = peg$currPos;
                                                            s37 = [];
                                                            s38 = peg$parse_();
                                                            while (s38 !== peg$FAILED) {
                                                              s37.push(s38);
                                                              if (s37.length >= 3) {
                                                                s38 = peg$FAILED;
                                                              } else {
                                                                s38 = peg$parse_();
                                                              }
                                                            }
                                                            if (s37.length < 3) {
                                                              peg$currPos = s36;
                                                              s36 = peg$FAILED;
                                                            } else {
                                                              s36 = s37;
                                                            }
                                                            if (s36 !== peg$FAILED) {
                                                              if (input.substr(peg$currPos, 6) === peg$c60) {
                                                                s37 = peg$c60;
                                                                peg$currPos += 6;
                                                              } else {
                                                                s37 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e77); }
                                                              }
                                                              if (s37 !== peg$FAILED) {
                                                                s38 = peg$parse_();
                                                                if (s38 !== peg$FAILED) {
                                                                  s39 = peg$parsevinid();
                                                                  if (s39 !== peg$FAILED) {
                                                                    s40 = peg$parseeol();
                                                                    if (s40 !== peg$FAILED) {
                                                                      s35 = s39;
                                                                    } else {
                                                                      peg$currPos = s35;
                                                                      s35 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s35;
                                                                    s35 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s35;
                                                                  s35 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s35;
                                                                s35 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s35;
                                                              s35 = peg$FAILED;
                                                            }
                                                            if (s35 === peg$FAILED) {
                                                              s35 = null;
                                                            }
                                                            s36 = peg$parsel();
                                                            if (s36 !== peg$FAILED) {
                                                              s37 = [];
                                                              s38 = peg$parsesubsystem();
                                                              while (s38 !== peg$FAILED) {
                                                                s37.push(s38);
                                                                s38 = peg$parsesubsystem();
                                                              }
                                                              s38 = peg$parsefaultsSection();
                                                              if (s38 !== peg$FAILED) {
                                                                s39 = peg$currPos;
                                                                if (input.substr(peg$currPos, 10) === peg$c61) {
                                                                  s40 = peg$c61;
                                                                  peg$currPos += 10;
                                                                } else {
                                                                  s40 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e78); }
                                                                }
                                                                if (s40 !== peg$FAILED) {
                                                                  s41 = peg$parse_();
                                                                  if (s41 !== peg$FAILED) {
                                                                    s42 = peg$parsereadiness();
                                                                    if (s42 !== peg$FAILED) {
                                                                      s43 = peg$parseeol();
                                                                      if (s43 !== peg$FAILED) {
                                                                        s39 = s42;
                                                                      } else {
                                                                        peg$currPos = s39;
                                                                        s39 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s39;
                                                                      s39 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s39;
                                                                    s39 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s39;
                                                                  s39 = peg$FAILED;
                                                                }
                                                                if (s39 === peg$FAILED) {
                                                                  s39 = null;
                                                                }
                                                                s40 = peg$parsel();
                                                                if (s40 !== peg$FAILED) {
                                                                  peg$savedPos = s0;
                                                                  s0 = peg$f5(s4, s10, s13, s18, s20, s21, s22, s28, s33, s35, s37, s38, s39);
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepartNumber() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parseuppnum();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      if (s3.length >= 3) {
        s4 = peg$FAILED;
      } else {
        s4 = peg$parseuppnum();
      }
    }
    if (s3.length < 3) {
      peg$currPos = s2;
      s2 = peg$FAILED;
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parsenum();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (s5.length >= 3) {
            s6 = peg$FAILED;
          } else {
            s6 = peg$parsenum();
          }
        }
        if (s5.length < 3) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parsenum();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (s7.length >= 3) {
                s8 = peg$FAILED;
              } else {
                s8 = peg$parsenum();
              }
            }
            if (s7.length < 3) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseupp();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s2 = [s2, s3, s4, s5, s6, s7];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }

    return s0;
  }

  function peg$parsecodingValue() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsehexa();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsehexa();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }

    return s0;
  }

  function peg$parseshopWsc() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseshortShopWsc();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parsenum();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (s5.length >= 3) {
            s6 = peg$FAILED;
          } else {
            s6 = peg$parsenum();
          }
        }
        if (s5.length < 3) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parsenum();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (s7.length >= 5) {
                s8 = peg$FAILED;
              } else {
                s8 = peg$parsenum();
              }
            }
            if (s7.length < 5) {
              peg$currPos = s6;
              s6 = peg$FAILED;
            } else {
              s6 = s7;
            }
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }

    return s0;
  }

  function peg$parseshortShopWsc() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsenum();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 5) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parsenum();
      }
    }
    if (s2.length < 5) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

    return s0;
  }

  function peg$parsevcid() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parsehexa();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      if (s3.length >= 18) {
        s4 = peg$FAILED;
      } else {
        s4 = peg$parsehexa();
      }
    }
    if (s3.length < 18) {
      peg$currPos = s2;
      s2 = peg$FAILED;
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parsehexa();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (s5.length >= 4) {
            s6 = peg$FAILED;
          } else {
            s6 = peg$parsehexa();
          }
        }
        if (s5.length < 4) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parsevinid() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsehexa();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 34) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parsehexa();
      }
    }
    if (s2.length < 34) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }

    return s0;
  }

  function peg$parsereadiness() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parsebin();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      if (s3.length >= 4) {
        s4 = peg$FAILED;
      } else {
        s4 = peg$parsebin();
      }
    }
    if (s3.length < 4) {
      peg$currPos = s2;
      s2 = peg$FAILED;
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parsebin();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (s5.length >= 4) {
            s6 = peg$FAILED;
          } else {
            s6 = peg$parsebin();
          }
        }
        if (s5.length < 4) {
          peg$currPos = s4;
          s4 = peg$FAILED;
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }

    return s0;
  }

  function peg$parsesubsystem() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parse_();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 3) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parse_();
      }
    }
    if (s2.length < 3) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c62) {
        s2 = peg$c62;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parsenum();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsenum();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos);
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c14;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 8) === peg$c48) {
                    s8 = peg$c48;
                    peg$currPos += 8;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e65); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsepartNumber();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$currPos;
                        s12 = [];
                        s13 = peg$parse_();
                        if (s13 !== peg$FAILED) {
                          while (s13 !== peg$FAILED) {
                            s12.push(s13);
                            s13 = peg$parse_();
                          }
                        } else {
                          s12 = peg$FAILED;
                        }
                        if (s12 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c63) {
                            s13 = peg$c63;
                            peg$currPos += 7;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e87); }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parse_();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$currPos;
                              s16 = peg$parserol();
                              s15 = input.substring(s15, peg$currPos);
                              s11 = s15;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 === peg$FAILED) {
                          s11 = null;
                        }
                        s12 = peg$parseeol();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$currPos;
                          s14 = [];
                          s15 = peg$parse_();
                          while (s15 !== peg$FAILED) {
                            s14.push(s15);
                            if (s14.length >= 3) {
                              s15 = peg$FAILED;
                            } else {
                              s15 = peg$parse_();
                            }
                          }
                          if (s14.length < 3) {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          } else {
                            s13 = s14;
                          }
                          if (s13 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 10) === peg$c53) {
                              s14 = peg$c53;
                              peg$currPos += 10;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e70); }
                            }
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parse_();
                              if (s15 !== peg$FAILED) {
                                s16 = peg$currPos;
                                s17 = peg$parserol();
                                s16 = input.substring(s16, peg$currPos);
                                s17 = peg$parseeol();
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$currPos;
                                  s19 = peg$currPos;
                                  s20 = [];
                                  s21 = peg$parse_();
                                  while (s21 !== peg$FAILED) {
                                    s20.push(s21);
                                    if (s20.length >= 3) {
                                      s21 = peg$FAILED;
                                    } else {
                                      s21 = peg$parse_();
                                    }
                                  }
                                  if (s20.length < 3) {
                                    peg$currPos = s19;
                                    s19 = peg$FAILED;
                                  } else {
                                    s19 = s20;
                                  }
                                  if (s19 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 7) === peg$c56) {
                                      s20 = peg$c56;
                                      peg$currPos += 7;
                                    } else {
                                      s20 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e73); }
                                    }
                                    if (s20 !== peg$FAILED) {
                                      s21 = peg$parse_();
                                      if (s21 !== peg$FAILED) {
                                        s22 = peg$parsecodingValue();
                                        if (s22 !== peg$FAILED) {
                                          s23 = peg$parseeol();
                                          if (s23 !== peg$FAILED) {
                                            s18 = s22;
                                          } else {
                                            peg$currPos = s18;
                                            s18 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s18;
                                          s18 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s18;
                                      s18 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s18;
                                    s18 = peg$FAILED;
                                  }
                                  if (s18 === peg$FAILED) {
                                    s18 = null;
                                  }
                                  s19 = peg$currPos;
                                  s20 = peg$currPos;
                                  s21 = [];
                                  s22 = peg$parse_();
                                  while (s22 !== peg$FAILED) {
                                    s21.push(s22);
                                    if (s21.length >= 3) {
                                      s22 = peg$FAILED;
                                    } else {
                                      s22 = peg$parse_();
                                    }
                                  }
                                  if (s21.length < 3) {
                                    peg$currPos = s20;
                                    s20 = peg$FAILED;
                                  } else {
                                    s20 = s21;
                                  }
                                  if (s20 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 11) === peg$c64) {
                                      s21 = peg$c64;
                                      peg$currPos += 11;
                                    } else {
                                      s21 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e88); }
                                    }
                                    if (s21 !== peg$FAILED) {
                                      s22 = peg$parse_();
                                      if (s22 !== peg$FAILED) {
                                        s23 = peg$parseshortShopWsc();
                                        if (s23 !== peg$FAILED) {
                                          s24 = peg$parserol();
                                          s25 = peg$parseeol();
                                          if (s25 !== peg$FAILED) {
                                            s19 = s23;
                                          } else {
                                            peg$currPos = s19;
                                            s19 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s19;
                                          s19 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s19;
                                        s19 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s19;
                                      s19 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s19;
                                    s19 = peg$FAILED;
                                  }
                                  if (s19 === peg$FAILED) {
                                    s19 = null;
                                  }
                                  s20 = peg$currPos;
                                  s21 = [];
                                  s22 = input.charAt(peg$currPos);
                                  if (peg$r11.test(s22)) {
                                    peg$currPos++;
                                  } else {
                                    s22 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                  }
                                  if (s22 !== peg$FAILED) {
                                    while (s22 !== peg$FAILED) {
                                      s21.push(s22);
                                      s22 = input.charAt(peg$currPos);
                                      if (peg$r11.test(s22)) {
                                        peg$currPos++;
                                      } else {
                                        s22 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                      }
                                    }
                                  } else {
                                    s21 = peg$FAILED;
                                  }
                                  if (s21 !== peg$FAILED) {
                                    s22 = peg$parseeol();
                                    if (s22 !== peg$FAILED) {
                                      s21 = [s21, s22];
                                      s20 = s21;
                                    } else {
                                      peg$currPos = s20;
                                      s20 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s20;
                                    s20 = peg$FAILED;
                                  }
                                  if (s20 === peg$FAILED) {
                                    s20 = null;
                                  }
                                  s21 = peg$parsel();
                                  if (s21 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f6(s4, s10, s11, s16, s18, s19);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefaultsSection() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 20) === peg$c65) {
      s1 = peg$c65;
      peg$currPos += 20;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeol();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f7();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.charAt(peg$currPos);
      if (peg$r12.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r1.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r1.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
        }
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c66) {
            s4 = peg$c66;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e93); }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 115) {
              s5 = peg$c67;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e94); }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c68) {
                s7 = peg$c68;
                peg$currPos += 6;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e95); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseeol();
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parsefault();
                  if (s10 !== peg$FAILED) {
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parsefault();
                    }
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f8(s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }

    return s0;
  }

  function peg$parsefault() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parsefaultCode();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c14;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parserol();
            s5 = input.substring(s5, peg$currPos);
            s6 = peg$parseeol();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = [];
              s9 = peg$parse_();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                if (s8.length >= 12) {
                  s9 = peg$FAILED;
                } else {
                  s9 = peg$parse_();
                }
              }
              if (s8.length < 12) {
                peg$currPos = s7;
                s7 = peg$FAILED;
              } else {
                s7 = s8;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parseerrorCode();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (s10 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s11 = peg$c14;
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e14); }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_();
                      if (s12 !== peg$FAILED) {
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                s9 = peg$parsefaultDescCode();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (s10 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s11 = peg$c14;
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e14); }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parse_();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$currPos;
                        s14 = peg$parserol();
                        s13 = input.substring(s13, peg$currPos);
                        s14 = peg$parseeol();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parsefreezeFrame();
                          if (s15 === peg$FAILED) {
                            s15 = null;
                          }
                          peg$savedPos = s0;
                          s0 = peg$f9(s1, s5, s8, s9, s13, s15);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseerrorCode() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 80) {
      s2 = peg$c69;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$currPos;
    s4 = [];
    s5 = peg$parsenum();
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      if (s4.length >= 4) {
        s5 = peg$FAILED;
      } else {
        s5 = peg$parsenum();
      }
    }
    if (s4.length < 4) {
      peg$currPos = s3;
      s3 = peg$FAILED;
    } else {
      s3 = s4;
    }
    if (s3 !== peg$FAILED) {
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }

    return s0;
  }

  function peg$parsefaultCode() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsenum();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 5) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parsenum();
      }
    }
    if (s2.length < 5) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parsefaultDescCode() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsenum();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 3) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parsenum();
      }
    }
    if (s2.length < 3) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parsefreezeFrame() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parse_();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (s2.length >= 13) {
        s3 = peg$FAILED;
      } else {
        s3 = peg$parse_();
      }
    }
    if (s2.length < 13) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 13) === peg$c70) {
        s2 = peg$c70;
        peg$currPos += 13;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseeol();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (s5.length >= 20) {
              s6 = peg$FAILED;
            } else {
              s6 = peg$parse_();
            }
          }
          if (s5.length < 20) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c71) {
              s5 = peg$c71;
              peg$currPos += 13;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e101); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$currPos;
                s9 = [];
                s10 = peg$parsebin();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  if (s9.length >= 8) {
                    s10 = peg$FAILED;
                  } else {
                    s10 = peg$parsebin();
                  }
                }
                if (s9.length < 8) {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                } else {
                  s8 = s9;
                }
                if (s8 !== peg$FAILED) {
                  s7 = input.substring(s7, peg$currPos);
                } else {
                  s7 = s8;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseeol();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = [];
                    s11 = peg$parse_();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      if (s10.length >= 20) {
                        s11 = peg$FAILED;
                      } else {
                        s11 = peg$parse_();
                      }
                    }
                    if (s10.length < 20) {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    } else {
                      s9 = s10;
                    }
                    if (s9 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 15) === peg$c72) {
                        s10 = peg$c72;
                        peg$currPos += 15;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e102); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsenum();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parseeol();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$currPos;
                              s15 = [];
                              s16 = peg$parse_();
                              while (s16 !== peg$FAILED) {
                                s15.push(s16);
                                if (s15.length >= 20) {
                                  s16 = peg$FAILED;
                                } else {
                                  s16 = peg$parse_();
                                }
                              }
                              if (s15.length < 20) {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              } else {
                                s14 = s15;
                              }
                              if (s14 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 16) === peg$c73) {
                                  s15 = peg$c73;
                                  peg$currPos += 16;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e103); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parse_();
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$currPos;
                                    s18 = [];
                                    s19 = peg$parsenum();
                                    if (s19 !== peg$FAILED) {
                                      while (s19 !== peg$FAILED) {
                                        s18.push(s19);
                                        s19 = peg$parsenum();
                                      }
                                    } else {
                                      s18 = peg$FAILED;
                                    }
                                    if (s18 !== peg$FAILED) {
                                      s17 = input.substring(s17, peg$currPos);
                                    } else {
                                      s17 = s18;
                                    }
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseeol();
                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$currPos;
                                        s20 = [];
                                        s21 = peg$parse_();
                                        while (s21 !== peg$FAILED) {
                                          s20.push(s21);
                                          if (s20.length >= 20) {
                                            s21 = peg$FAILED;
                                          } else {
                                            s21 = peg$parse_();
                                          }
                                        }
                                        if (s20.length < 20) {
                                          peg$currPos = s19;
                                          s19 = peg$FAILED;
                                        } else {
                                          s19 = s20;
                                        }
                                        if (s19 !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 14) === peg$c74) {
                                            s20 = peg$c74;
                                            peg$currPos += 14;
                                          } else {
                                            s20 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e104); }
                                          }
                                          if (s20 !== peg$FAILED) {
                                            s21 = peg$parse_();
                                            if (s21 !== peg$FAILED) {
                                              s22 = peg$currPos;
                                              s23 = [];
                                              s24 = peg$parsenum();
                                              if (s24 !== peg$FAILED) {
                                                while (s24 !== peg$FAILED) {
                                                  s23.push(s24);
                                                  s24 = peg$parsenum();
                                                }
                                              } else {
                                                s23 = peg$FAILED;
                                              }
                                              if (s23 !== peg$FAILED) {
                                                s22 = input.substring(s22, peg$currPos);
                                              } else {
                                                s22 = s23;
                                              }
                                              if (s22 !== peg$FAILED) {
                                                s23 = peg$parseeol();
                                                if (s23 !== peg$FAILED) {
                                                  s24 = peg$currPos;
                                                  s25 = [];
                                                  s26 = peg$parse_();
                                                  while (s26 !== peg$FAILED) {
                                                    s25.push(s26);
                                                    if (s25.length >= 20) {
                                                      s26 = peg$FAILED;
                                                    } else {
                                                      s26 = peg$parse_();
                                                    }
                                                  }
                                                  if (s25.length < 20) {
                                                    peg$currPos = s24;
                                                    s24 = peg$FAILED;
                                                  } else {
                                                    s24 = s25;
                                                  }
                                                  if (s24 !== peg$FAILED) {
                                                    if (input.substr(peg$currPos, 8) === peg$c12) {
                                                      s25 = peg$c12;
                                                      peg$currPos += 8;
                                                    } else {
                                                      s25 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e12); }
                                                    }
                                                    if (s25 !== peg$FAILED) {
                                                      s26 = peg$parse_();
                                                      if (s26 !== peg$FAILED) {
                                                        s27 = peg$currPos;
                                                        s28 = [];
                                                        s29 = peg$parsenum();
                                                        if (s29 !== peg$FAILED) {
                                                          while (s29 !== peg$FAILED) {
                                                            s28.push(s29);
                                                            s29 = peg$parsenum();
                                                          }
                                                        } else {
                                                          s28 = peg$FAILED;
                                                        }
                                                        if (s28 !== peg$FAILED) {
                                                          s27 = input.substring(s27, peg$currPos);
                                                        } else {
                                                          s27 = s28;
                                                        }
                                                        if (s27 !== peg$FAILED) {
                                                          s28 = peg$parse_();
                                                          if (s28 !== peg$FAILED) {
                                                            if (input.substr(peg$currPos, 2) === peg$c43) {
                                                              s29 = peg$c43;
                                                              peg$currPos += 2;
                                                            } else {
                                                              s29 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e56); }
                                                            }
                                                            if (s29 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 5) === peg$c44) {
                                                                s29 = peg$c44;
                                                                peg$currPos += 5;
                                                              } else {
                                                                s29 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e57); }
                                                              }
                                                            }
                                                            if (s29 !== peg$FAILED) {
                                                              s30 = peg$parseeol();
                                                              if (s30 !== peg$FAILED) {
                                                                s31 = peg$currPos;
                                                                s32 = [];
                                                                s33 = peg$parse_();
                                                                while (s33 !== peg$FAILED) {
                                                                  s32.push(s33);
                                                                  if (s32.length >= 20) {
                                                                    s33 = peg$FAILED;
                                                                  } else {
                                                                    s33 = peg$parse_();
                                                                  }
                                                                }
                                                                if (s32.length < 20) {
                                                                  peg$currPos = s31;
                                                                  s31 = peg$FAILED;
                                                                } else {
                                                                  s31 = s32;
                                                                }
                                                                if (s31 !== peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 16) === peg$c75) {
                                                                    s32 = peg$c75;
                                                                    peg$currPos += 16;
                                                                  } else {
                                                                    s32 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e105); }
                                                                  }
                                                                  if (s32 !== peg$FAILED) {
                                                                    s33 = peg$parse_();
                                                                    if (s33 !== peg$FAILED) {
                                                                      s34 = peg$currPos;
                                                                      s35 = peg$parsenum();
                                                                      if (s35 !== peg$FAILED) {
                                                                        s34 = input.substring(s34, peg$currPos);
                                                                      } else {
                                                                        s34 = s35;
                                                                      }
                                                                      if (s34 !== peg$FAILED) {
                                                                        s35 = peg$parseeol();
                                                                        if (s35 !== peg$FAILED) {
                                                                          s36 = peg$parsel();
                                                                          if (s36 !== peg$FAILED) {
                                                                            peg$savedPos = s0;
                                                                            s0 = peg$f10(s7, s12, s17, s22, s27, s29, s34);
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedashLine() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c14;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeol();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }

    return s0;
  }

  function peg$parsenum() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }

    return s0;
  }

  function peg$parsehexa() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r13.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }

    return s0;
  }

  function peg$parsebin() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r4.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }

    return s0;
  }

  function peg$parseupp() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r14.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }

    return s0;
  }

  function peg$parseuppnum() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r15.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c76;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }

    return s0;
  }

  function peg$parsew() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r16.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r16.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e118); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parsel() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parseeol();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }

    return s0;
  }

  function peg$parseeol() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }

    return s0;
  }

  function peg$parserol() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r17.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r17.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e121); }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
